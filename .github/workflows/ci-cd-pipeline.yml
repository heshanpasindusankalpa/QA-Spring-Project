name: CI/CD Pipeline for Spring Boot QA Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and run unit tests
        run: mvn clean package
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar

  selenium-tests:
    needs: build-and-test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Start Spring Boot application
        run: |
          java -jar target/*.jar --server.port=8080 &
          echo $! > spring-boot-app.pid
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-all-errors http://localhost:8080/actuator/health
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Start frontend
        working-directory: ./frontend
        run: |
          npm run build
          npx serve -s build -l 3000 --listen 0.0.0.0 &
          echo $! > frontend.pid
          until curl -s http://localhost:3000; do
            echo "Waiting for frontend to start..."
            sleep 5
          done
          


      - name: Install Chrome for Selenium
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xvfb
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get install -f -y

      - name: Run Selenium tests
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x16 &
          mvn test -Dtest=AuthenticationSeleniumTests -Dselenium.headless=true
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb

      - name: Stop frontend server
        run: |
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) || true
            rm frontend.pid
          fi

      - name: Stop Spring Boot application
        run: |
          if [ -f spring-boot-app.pid ]; then
            kill $(cat spring-boot-app.pid) || true
            rm spring-boot-app.pid
          fi

  api-tests:
    needs: build-and-test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/

      - name: Start Spring Boot application
        run: |
          java -jar target/*.jar --server.port=8080 &
          echo $! > spring-boot-app.pid
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-all-errors http://localhost:8080/actuator/health
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb

      - name: Install Newman for API tests
        run: npm install -g newman

      - name: Run API tests
        run: |
          newman run postman-collection.json || true
        env:
          SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/testdb

      - name: Stop Spring Boot application
        run: |
          if [ -f spring-boot-app.pid ]; then
            kill $(cat spring-boot-app.pid) || true
            rm spring-boot-app.pid
          fi

  deploy:
    needs: [build-and-test, selenium-tests, api-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built JAR
        uses: actions/download-artifact@v3
        with:
          name: application-jar
          path: target/

      - name: Display build success
        run: |
          echo "ðŸŽ‰ CI/CD Pipeline Completed Successfully!"
          echo "âœ… Build + Unit Tests Passed"
          echo "âœ… Selenium Tests Passed"
          echo "âœ… API Tests Passed"
          echo "ðŸ“¦ JAR ready for deployment!"
